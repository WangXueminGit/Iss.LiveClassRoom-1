//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System.Web
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="HttpPostedFileBase", Namespace="http://schemas.datacontract.org/2004/07/System.Web")]
    public partial class HttpPostedFileBase : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="fileupload")]
public interface fileupload
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/fileupload/ReceiveUploadMessage")]
    void ReceiveUploadMessage(System.Web.HttpPostedFileBase videoFile, string Title, string CourseId, string InstructorId);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/fileupload/ReceiveUploadMessage")]
    System.Threading.Tasks.Task ReceiveUploadMessageAsync(System.Web.HttpPostedFileBase videoFile, string Title, string CourseId, string InstructorId);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/fileupload/ReceiveAcceptOrNot")]
    void ReceiveAcceptOrNot(bool IsAccept, string VideoId, string AdminId);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/fileupload/ReceiveAcceptOrNot")]
    System.Threading.Tasks.Task ReceiveAcceptOrNotAsync(bool IsAccept, string VideoId, string AdminId);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface fileuploadChannel : fileupload, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class fileuploadClient : System.ServiceModel.ClientBase<fileupload>, fileupload
{
    
    public fileuploadClient()
    {
    }
    
    public fileuploadClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public fileuploadClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public fileuploadClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public fileuploadClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void ReceiveUploadMessage(System.Web.HttpPostedFileBase videoFile, string Title, string CourseId, string InstructorId)
    {
        base.Channel.ReceiveUploadMessage(videoFile, Title, CourseId, InstructorId);
    }
    
    public System.Threading.Tasks.Task ReceiveUploadMessageAsync(System.Web.HttpPostedFileBase videoFile, string Title, string CourseId, string InstructorId)
    {
        return base.Channel.ReceiveUploadMessageAsync(videoFile, Title, CourseId, InstructorId);
    }
    
    public void ReceiveAcceptOrNot(bool IsAccept, string VideoId, string AdminId)
    {
        base.Channel.ReceiveAcceptOrNot(IsAccept, VideoId, AdminId);
    }
    
    public System.Threading.Tasks.Task ReceiveAcceptOrNotAsync(bool IsAccept, string VideoId, string AdminId)
    {
        return base.Channel.ReceiveAcceptOrNotAsync(IsAccept, VideoId, AdminId);
    }
}
